[{"C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\index.js":"1","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\private_route.js":"2","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\_components\\index.js":"3","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\_components\\private_route.js":"4","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\_components\\app\\index.js":"5","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\_components\\project\\index.js":"6","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\_components\\floating_action_button\\index.js":"7","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\_components\\graph_editor\\index.js":"8","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\_components\\code_editor\\index.js":"9","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\_components\\graph_editor\\task_node.js":"10","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\_components\\graph_editor\\sidebar\\index.js":"11","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\_components\\console\\index.js":"12","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\_components\\graph_editor\\node_types\\index.js":"13","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\_components\\graph_editor\\node_types\\end_node.js":"14","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\_components\\graph_editor\\node_types\\start_node.js":"15","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\_components\\graph_editor\\node_types\\script_node.js":"16","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\_components\\console\\TerminalMessage.jsx":"17","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\_components\\navbar\\index.js":"18","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\_components\\login\\index.js":"19","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\_components\\home\\index.js":"20","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\_components\\projects\\index.js":"21","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\_components\\docs\\index.js":"22","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\_components\\projects\\new\\index.js":"23","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\_components\\docs\\contents.js":"24","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\_components\\list_item\\index.js":"25","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\helpers\\store.js":"26","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\features\\userSlice.js":"27","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\helpers\\index.js":"28","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\helpers\\history.js":"29","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\helpers\\auth_header.js":"30","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\features\\projectSlice.js":"31"},{"size":475,"mtime":1623516240617,"results":"32","hashOfConfig":"33"},{"size":520,"mtime":1618153903295,"results":"34","hashOfConfig":"35"},{"size":32,"mtime":1618215221588,"results":"36","hashOfConfig":"37"},{"size":657,"mtime":1618267934585,"results":"38","hashOfConfig":"33"},{"size":1251,"mtime":1623516179887,"results":"39","hashOfConfig":"33"},{"size":3731,"mtime":1623515422309,"results":"40","hashOfConfig":"33"},{"size":537,"mtime":1618847214996,"results":"41","hashOfConfig":"33"},{"size":6463,"mtime":1623155241413,"results":"42","hashOfConfig":"33"},{"size":10142,"mtime":1623399418401,"results":"43","hashOfConfig":"33"},{"size":1098,"mtime":1615561574518,"results":"44","hashOfConfig":"33"},{"size":591,"mtime":1623003900799,"results":"45","hashOfConfig":"33"},{"size":2943,"mtime":1623362231272,"results":"46","hashOfConfig":"33"},{"size":91,"mtime":1621179660760,"results":"47","hashOfConfig":"33"},{"size":470,"mtime":1623003256039,"results":"48","hashOfConfig":"33"},{"size":480,"mtime":1623003250969,"results":"49","hashOfConfig":"33"},{"size":611,"mtime":1623003270459,"results":"50","hashOfConfig":"33"},{"size":677,"mtime":1623360414927,"results":"51","hashOfConfig":"33"},{"size":3059,"mtime":1623518306306,"results":"52","hashOfConfig":"33"},{"size":4040,"mtime":1623518280077,"results":"53","hashOfConfig":"33"},{"size":2778,"mtime":1620849586749,"results":"54","hashOfConfig":"33"},{"size":2743,"mtime":1623525750989,"results":"55","hashOfConfig":"33"},{"size":2119,"mtime":1623501326114,"results":"56","hashOfConfig":"33"},{"size":1513,"mtime":1623516180439,"results":"57","hashOfConfig":"33"},{"size":387,"mtime":1618423041700,"results":"58","hashOfConfig":"33"},{"size":304,"mtime":1618423041697,"results":"59","hashOfConfig":"33"},{"size":291,"mtime":1623525729410,"results":"60","hashOfConfig":"33"},{"size":1682,"mtime":1623518782287,"results":"61","hashOfConfig":"33"},{"size":84,"mtime":1623515540173,"results":"62","hashOfConfig":"33"},{"size":97,"mtime":1618311177617,"results":"63","hashOfConfig":"33"},{"size":277,"mtime":1618178704435,"results":"64","hashOfConfig":"33"},{"size":1113,"mtime":1623525678019,"results":"65","hashOfConfig":"33"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"1wcgmh3",{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},"eemzca",{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"1essevp",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"68"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"68"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"68"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"68"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"94"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"68"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"68"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"68"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"68"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"68"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"68"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"68"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"68"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"68"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\index.js",[],["146","147"],"C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\private_route.js",[],["148","149"],"C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\_components\\index.js",[],["150","151"],"C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\_components\\private_route.js",[],"C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\_components\\app\\index.js",["152","153","154","155"],"import React, { useEffect } from \"react\";\r\nimport { Route, Switch, Redirect } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { history } from \"../../helpers\";\r\nimport { PrivateRoute } from \"../private_route\";\r\nimport { NavBar } from \"../navbar\";\r\nimport { Home } from \"../home\";\r\nimport { Docs } from \"../docs\";\r\nimport { Login } from \"../login/index\";\r\nimport { Projects } from \"../projects\";\r\nimport { NewProject } from \"../projects/new\";\r\nimport { Project } from \"../project\";\r\n\r\nimport \"./index.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport const App = () => {\r\n  const location = useLocation();\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <NavBar location={location} />\r\n      <Switch>\r\n        <Route path=\"/\" exact component={Home} />\r\n        <Route path=\"/docs\" component={Docs} />\r\n        <Route path=\"/login\" component={Login} />\r\n        <PrivateRoute path=\"/projects\" exact component={Projects} />\r\n        <PrivateRoute path=\"/projects/new\" component={NewProject} />\r\n        <PrivateRoute path=\"/projects/:id\" component={Project} />\r\n        <Redirect from=\"*\" to=\"/\" />\r\n      </Switch>\r\n    </React.Fragment>\r\n  );\r\n};\r\n","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\_components\\project\\index.js",["156","157","158","159","160"],"import React, { useEffect, useState } from 'react';\r\nimport { Container, Row, Col, Button } from 'react-bootstrap';\r\nimport './index.css';\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { projectActions, taskActions } from '../../_actions';\r\nimport { CodeEditor} from '../code_editor';\r\nimport GraphEditor from '../graph_editor';\r\nimport { Console } from '../console';\r\n// import { io } from \"socket.io-client\";\r\n// import { socket } from '../../_helpers/socket';\r\n\r\nimport socketIOClient from \"socket.io-client\";\r\n\r\nlet socket = null;\r\n\r\n\r\n\r\nexport const Project = () => {\r\n\r\n    useEffect(() => {\r\n        \r\n        socket = socketIOClient('http://localhost:8000');\r\n        socket.on(\"connect\", data => {\r\n            prettifyConsoleText('Connected to edge device.', \"SUCCESS\");\r\n        });\r\n\r\n        socket.on('data', data => {\r\n            setConsoleText({text: data});\r\n        });\r\n\r\n        socket.on('error', err => {\r\n            setConsoleText({text: err,  style:{color: 'red'}});\r\n        });\r\n\r\n        socket.on('state', state => {\r\n            setDebuggerState(state);\r\n        })\r\n\r\n    }, []);\r\n\r\n    const [debuggerState, setDebuggerState] = useState(null);\r\n\r\n    const [selectedNode, setSelectedNode] = useState( {\r\n        id: '1',\r\n        type: 'StartNode',\r\n        data: { \r\n            label: 'Start Sequence',\r\n            script: '',\r\n            breakpoints: []\r\n        },\r\n        position: { x: 250, y: 100 },\r\n      }\r\n    );\r\n    \r\n    const user = useSelector(state => state.authentication.user);\r\n    \r\n    const prettifyConsoleText = (text, type) => {\r\n        const formattedText = `[${user.username}] ${text}`;\r\n        if(type == 'INFO')\r\n            setConsoleText({text: formattedText, style: {color: 'aqua'}});\r\n        else if(type == 'SUCCESS')\r\n            setConsoleText({text: formattedText, style: {color: 'green'}});\r\n        else\r\n            setConsoleText({text: formattedText});\r\n    }\r\n\r\n    const [consoleText, setConsoleText] = useState();\r\n\r\n    let { id } = useParams();\r\n\r\n    const dispatch = useDispatch();\r\n    const project = useSelector(state => state.projects.item);\r\n    const taskResult = useSelector(state => state.tasks.item);\r\n\r\n    useEffect(() => {\r\n        console.log({taskResult});\r\n    }, [taskResult])\r\n\r\n    useEffect(() => {\r\n        dispatch(projectActions.get(id));\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        console.log({project});\r\n    }, [project])\r\n\r\n    // socket.on('connect', () => {\r\n    //     // update messages\r\n    //     console.log('Connected to socket!');\r\n    // });\r\n    // socket.on('runResult', payload => {\r\n    //     // update messages\r\n    //     console.log({payload});\r\n    // });\r\n\r\n    return (\r\n    <>  \r\n            <Container fluid style={{ maxHeight:\"100%\" }}> \r\n                <Row>\r\n                    <Col>\r\n                        <h3 style={{ display: 'inline-block' }} >Project Name: {project && project.name}</h3>\r\n                        <div style={{ float: 'right' }} >\r\n                                <Button style={{ margin: '5px' }} disabled={selectedNode.type !== 'ScriptNode'}>Run Sequence</Button>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <CodeEditor prettifyConsoleText={prettifyConsoleText} debuggerState={debuggerState} socket={socket} selectedNode={selectedNode} setSelectedNode={setSelectedNode} />\r\n                    </Col>\r\n                    <Col>\r\n                        <GraphEditor selectedNode={selectedNode} setSelectedNode={setSelectedNode} />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Console consoleText={consoleText} />\r\n                </Row>\r\n            </Container>\r\n    </>\r\n    );\r\n}\r\n\r\n","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\_components\\floating_action_button\\index.js",[],"C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\_components\\graph_editor\\index.js",["161","162","163"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport ReactFlow, {\r\n  ReactFlowProvider,\r\n  addEdge,\r\n  removeElements,\r\n  Controls,\r\n  isNode\r\n} from 'react-flow-renderer';\r\nimport { SideBar } from './sidebar';\r\nimport './dnd.css';\r\nimport { EndNode, ScriptNode, StartNode } from './node_types';\r\nimport dagre from 'dagre';\r\nconst dagreGraph = new dagre.graphlib.Graph();\r\ndagreGraph.setDefaultEdgeLabel(() => ({}));\r\n\r\nconst nodeWidth = 172;\r\nconst nodeHeight = 36;\r\n\r\nconst getLayoutedElements = (elements, direction = 'TB') => {\r\n  const isHorizontal = direction === 'LR';\r\n  dagreGraph.setGraph({ rankdir: direction });\r\n\r\n  elements.forEach((el) => {\r\n    if (isNode(el)) {\r\n      dagreGraph.setNode(el.id, { width: nodeWidth, height: nodeHeight });\r\n    } else {\r\n      dagreGraph.setEdge(el.source, el.target);\r\n    }\r\n  });\r\n\r\n  dagre.layout(dagreGraph);\r\n\r\n  return elements.map((el) => {\r\n    if (isNode(el)) {\r\n      const nodeWithPosition = dagreGraph.node(el.id);\r\n      el.targetPosition = isHorizontal ? 'left' : 'top';\r\n      el.sourcePosition = isHorizontal ? 'right' : 'bottom';\r\n\r\n      // unfortunately we need this little hack to pass a slightly different position\r\n      // to notify react flow about the change. Moreover we are shifting the dagre node position\r\n      // (anchor=center center) to the top left so it matches the react flow node anchor point (top left).\r\n      el.position = {\r\n        x: nodeWithPosition.x - nodeWidth / 2 + Math.random() / 1000,\r\n        y: nodeWithPosition.y - nodeHeight / 2,\r\n      };\r\n    }\r\n\r\n    return el;\r\n  });\r\n};\r\n\r\n\r\nconst initialElements = [\r\n  {\r\n    id: '1',\r\n    type: 'StartNode',\r\n    data: { \r\n      label: 'Start Sequence',\r\n      script: '',\r\n      breakpoints: []\r\n    },\r\n    position: { x: 250, y: 100 },\r\n  },\r\n  {\r\n    data: {\r\n      label: \"Script Node\", \r\n      script: 'print(\"1\")\\nprint(\"2\")\\nprint(\"3\")\\nprint(\"4\")\\nprint(\"5\")',\r\n      breakpoints: []\r\n    },\r\n    id: \"2\",\r\n    position: {x: 250, y: 200},\r\n    type: \"ScriptNode\"\r\n  },\r\n  {\r\n    id: \"reactflow__edge-1null-2null\",\r\n    source: \"1\",\r\n    sourceHandle: null,\r\n    target: \"2\",\r\n    targetHandle: null\r\n  }, \r\n  {\r\n    id: '3',\r\n    type: 'EndNode',\r\n    data: { \r\n      label: 'End Sequence',\r\n      script: '',\r\n      breakpoints: []\r\n    },\r\n    position: { x: 250, y: 300 },\r\n  },\r\n  {\r\n    id: \"reactflow__edge-2null-3null\",\r\n    source: \"2\",\r\n    sourceHandle: null,\r\n    target: \"3\",\r\n    targetHandle: null\r\n  }\r\n];\r\nlet id = 0;\r\nconst getId = () => `dndnode_${id++}`;\r\n\r\nconst nodeTypes = {\r\n  StartNode,\r\n  ScriptNode,\r\n  EndNode\r\n};\r\n\r\n\r\nconst layoutedElements = getLayoutedElements(initialElements, \"LR\");\r\n\r\n\r\nconst GraphEditor = ({selectedNode, setSelectedNode}) => {\r\n  const reactFlowWrapper = useRef(null);\r\n  const [reactFlowInstance, setReactFlowInstance] = useState(null);\r\n  const [elements, setElements] = useState(layoutedElements);\r\n\r\n  const [formatLayout, setFormatLayout] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if(formatLayout){\r\n        setFormatLayout(false);\r\n        const layoutedElements = getLayoutedElements(elements, \"LR\");\r\n        setElements(layoutedElements);\r\n    }\r\n  }, formatLayout);\r\n\r\n  //const [selectedNode, setSelectedNode] = useState({id: -1, data: {label: 'test'}});\r\n\r\n  const [selectedNodeName, setSelectedNodeName] = useState(null);\r\n\r\n  const onElementClick= (evt, node) => { \r\n    if(node.type === 'ScriptNode'){\r\n      console.log('changing selected node to ' + node.data.label)\r\n      return setSelectedNode(node)\r\n    }\r\n    else return false;\r\n    };\r\n\r\n  useEffect(() => setSelectedNodeName(selectedNode.data.label), [selectedNode]);\r\n\r\n  useEffect(() => {\r\n    setElements((els) =>\r\n      els.map((el) => {\r\n        if (el.id === selectedNode.id) {\r\n          // it's important that you create a new object here\r\n          // in order to notify react flow about the change\r\n          el.data = {\r\n            ...el.data,\r\n            label: selectedNodeName,\r\n            style: { backgroundColor: 'red !important' }\r\n          };\r\n          //el.style = { backgroundColor: 'red' };\r\n        }\r\n        return el;\r\n      })\r\n    );\r\n  }, [selectedNodeName]);\r\n\r\n  const onConnect = (params) => setElements((els) => addEdge(params, els));\r\n  const onNodeDragStart = (evt, node) => setSelectedNode(node);\r\n  const onElementsRemove = (elementsToRemove) =>\r\n    setElements((els) => removeElements(elementsToRemove, els));\r\n  const onLoad = (_reactFlowInstance) =>\r\n    setReactFlowInstance(_reactFlowInstance);\r\n  const onDragOver = (event) => {\r\n    event.preventDefault();\r\n    event.dataTransfer.dropEffect = 'move';\r\n    \r\n  };\r\n  const onDrop = (event) => {\r\n    event.preventDefault();\r\n    const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\r\n    const type = event.dataTransfer.getData('application/reactflow');\r\n    const position = reactFlowInstance.project({\r\n      x: event.clientX - reactFlowBounds.left,\r\n      y: event.clientY - reactFlowBounds.top,\r\n    });\r\n    const id = getId();\r\n    const newNode = {\r\n      id,\r\n      type,\r\n      position,\r\n      data: { \r\n        label: `node ${id}`, \r\n        script: \"\",\r\n        breakpoints: []\r\n      },\r\n    };\r\n    setElements((es) => es.concat(newNode));\r\n    setSelectedNode(newNode);\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //     const layoutedElements = getLayoutedElements(elements, \"LR\");\r\n  //     setElements(layoutedElements);\r\n  //   },\r\n  //   [elements]\r\n  // );\r\n\r\n  return (\r\n    <div className=\"dndflow\">\r\n      <ReactFlowProvider>\r\n        <SideBar setFormatLayout={setFormatLayout} />\r\n        <div className=\"reactflow-wrapper\" ref={reactFlowWrapper}>\r\n          <ReactFlow\r\n            elements={elements}\r\n            nodeTypes={nodeTypes}\r\n            onConnect={onConnect}\r\n            onElementsRemove={onElementsRemove}\r\n            onElementClick = {onElementClick}\r\n            onLoad={onLoad}\r\n            onDrop={onDrop}\r\n            onDragOver={onDragOver}\r\n            onNodeDragStart = {onNodeDragStart}\r\n          >\r\n            <div className=\"updatenode__controls\">\r\n            <label>label:</label>\r\n            <input\r\n              value={selectedNodeName}\r\n              onChange={(evt) => setSelectedNodeName(evt.target.value)}\r\n            />\r\n          </div>\r\n            <Controls />\r\n          </ReactFlow>\r\n        </div>\r\n      </ReactFlowProvider>\r\n    </div>\r\n  );\r\n};\r\nexport default GraphEditor;","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\_components\\code_editor\\index.js",["164","165","166","167","168","169","170","171","172"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport \"codemirror/lib/codemirror.css\";\r\nimport \"codemirror/theme/material.css\";\r\nimport \"codemirror/mode/javascript/javascript\";\r\nimport \"codemirror/mode/python/python\";\r\nimport \"codemirror/addon/selection/active-line\";\r\nimport { Controlled as ControlledEditor } from \"react-codemirror2\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faCompressAlt,\r\n  faExpandAlt,\r\n  faPlay,\r\n  faPlayCircle,\r\n  faShare,\r\n  faStepForward,\r\n  faStopCircle,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport \"./index.css\";\r\n\r\nexport const CodeEditor = (props) => {\r\n  const {\r\n    selectedNode,\r\n    setSelectedNode,\r\n    prettifyConsoleText,\r\n    socket,\r\n    debuggerState,\r\n  } = props;\r\n\r\n  const [open, setOpen] = useState(true);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [isDebugging, setIsDebugging] = useState(false);\r\n  const [isReady, setIsReady] = useState(false);\r\n  const [markers, setMarkers] = useState([]);\r\n  const [clearMarkers, setClearMarkers] = useState(false);\r\n\r\n  const debuggerStateRef = useRef(debuggerState);\r\n  const socketRef = useRef(socket);\r\n\r\n  const handleRun = () => {\r\n    prettifyConsoleText(`Running ${selectedNode.data.label}, please wait..`);\r\n    socket.emit(\"run\", selectedNode.data);\r\n  };\r\n  const handleDebug = () => {\r\n    //prettifyConsoleText(`Debugging ${selectedNode.data.label}, please wait..`);\r\n    socket.emit(\"debug\", selectedNode.data);\r\n  };\r\n  const handleContinue = () => socket.emit(\"continue\", selectedNode.data);\r\n  const handleStep = () => socket.emit(\"step\", selectedNode.data);\r\n  const handleAbort = () => socket.emit(\"abort\");\r\n\r\n  useEffect(() => {\r\n    socketRef.current = socket;\r\n  }, [socket]);\r\n\r\n  useEffect(() => {\r\n    for (let i = 0; i < markers.length; i++) {\r\n      markers[i].clear();\r\n    }\r\n    setMarkers([]);\r\n    setClearMarkers(false);\r\n  }, [clearMarkers]);\r\n\r\n  const markLine = (lineNumber, className = \"codemirror-highlighted\") => {\r\n    const from = { line: lineNumber - 1, ch: 0 };\r\n    const to = { line: lineNumber - 1, ch: 1000000 };\r\n    let m = editorRef.current.markText(from, to, { className });\r\n    setMarkers(markers.concat(m));\r\n  };\r\n\r\n  useEffect(() => {\r\n    let prevState = debuggerStateRef.current;\r\n    console.log(debuggerState);\r\n    if (debuggerState == null) return;\r\n    switch (debuggerState.state) {\r\n      case \"STATE_RUNNING\":\r\n        setIsRunning(true);\r\n        break;\r\n      case \"STATE_DEBUGGING\":\r\n        setIsDebugging(true);\r\n        prettifyConsoleText(\r\n          `Debugging ${selectedNode.data.label}, please wait..`\r\n        );\r\n        break;\r\n      case \"STATE_COMPLETE\":\r\n        setIsRunning(false);\r\n        setIsDebugging(false);\r\n        prettifyConsoleText(\r\n          `${selectedNode.data.label} complete :)`,\r\n          \"SUCCESS\"\r\n        );\r\n        setClearMarkers(true);\r\n        break;\r\n      case \"STATE_PAUSED\":\r\n        if (debuggerState.breakpoint) {\r\n          markLine(debuggerState.lineNumber);\r\n        }\r\n        break;\r\n      case \"STATE_ABORTED\":\r\n        prettifyConsoleText(`Aborted.`);\r\n        setIsReady(false);\r\n        setClearMarkers(true);\r\n        socket.emit(\"getState\");\r\n        break;\r\n      case \"STATE_IDLE\":\r\n        if (prevState) {\r\n          if (\r\n            prevState.state == \"STATE_BREAKPOINT_ADDED\" ||\r\n            prevState.state == \"STATE_BREAKPOINT_REMOVED\"\r\n          )\r\n            break;\r\n          else if(prevState.state == \"STATE_ABORTED\"){ \r\n            // Add current breakpoints back to new debugger instance after abort.\r\n            socket.emit(\"addBreakpoints\", selectedNode.data.breakpoints);\r\n          }\r\n        }\r\n        prettifyConsoleText(`Process engine ready.`, \"INFO\");\r\n        setIsReady(true);\r\n        setIsRunning(false);\r\n        setIsDebugging(false);\r\n        break;\r\n      case \"STATE_CONTINUING\":\r\n        setClearMarkers(true);\r\n        break;\r\n      case \"STATE_BREAKPOINT_ADDED\":\r\n        addBreakpoint(debuggerState.lineNumber);\r\n        break;\r\n      case \"STATE_BREAKPOINT_REMOVED\":\r\n        removeBreakpoint(debuggerState.lineNumber);\r\n        break;\r\n    }\r\n    debuggerStateRef.current = debuggerState;\r\n  }, [debuggerState]);\r\n\r\n  function makeMarker() {\r\n    var marker = document.createElement(\"div\");\r\n    marker.style.color = \"#fff\";\r\n    marker.style.marginLeft = \"5px\";\r\n    marker.innerHTML = \"●\";\r\n    return marker;\r\n  }\r\n\r\n  const selectedNodeRef = useRef(selectedNode);\r\n  const editorRef = useRef(null);\r\n\r\n  // Update breakpoints when switching between nodes.\r\n  useEffect(() => {\r\n    // If a new node has been selected.\r\n    if (selectedNode.id != selectedNodeRef.current.id) {\r\n      // Remove all breakpoints for previously selected node.\r\n      let breakpoints = selectedNodeRef.current.data.breakpoints;\r\n      for (let i = 0; i < breakpoints.length; i++) {\r\n        editorRef.current.setGutterMarker(\r\n          breakpoints[i] - 1,\r\n          \"breakpoints\",\r\n          null\r\n        );\r\n      }\r\n      // Render previously set breakpoints for current node.\r\n      breakpoints = selectedNode.data.breakpoints;\r\n      for (let i = 0; i < breakpoints.length; i++) {\r\n        editorRef.current.setGutterMarker(\r\n          breakpoints[i] - 1,\r\n          \"breakpoints\",\r\n          makeMarker()\r\n        );\r\n      }\r\n    }\r\n\r\n    selectedNodeRef.current = selectedNode;\r\n  }, [selectedNode]);\r\n\r\n  function handleChange(editor, data, value) {\r\n    console.log(\"onBeforeChange\");\r\n    let selectedNodeCopy = { ...selectedNode };\r\n    selectedNodeCopy.data.script = value;\r\n    setSelectedNode(selectedNodeCopy);\r\n  }\r\n\r\n  function breakpointExists(lineNumber) {\r\n    let editor = editorRef.current;\r\n    let lineInfo = editor.lineInfo(lineNumber);\r\n    return lineInfo.gutterMarkers;\r\n  }\r\n\r\n  function addBreakpoint(lineNumber) {\r\n    let editor = editorRef.current;\r\n    let selectedNodeCopy = { ...selectedNodeRef.current };\r\n    selectedNodeCopy.data.breakpoints.push(lineNumber);\r\n    setSelectedNode(selectedNodeCopy);\r\n    editor.setGutterMarker(lineNumber - 1, \"breakpoints\", makeMarker());\r\n    editor.addLineClass(lineNumber - 1, \"line\", \"new-breakpoint\");\r\n  }\r\n\r\n  function removeBreakpoint(lineNumber) {\r\n    let editor = editorRef.current;\r\n    // Remove the breakpoint.\r\n    let selectedNodeCopy = { ...selectedNodeRef.current };\r\n    const index = selectedNodeCopy.data.breakpoints.indexOf(lineNumber);\r\n    if (index > -1) {\r\n      selectedNodeCopy.data.breakpoints.splice(index, 1);\r\n      setSelectedNode(selectedNodeCopy);\r\n      editor.setGutterMarker(lineNumber - 1, \"breakpoints\", null);\r\n      //editor.addLineClass(line, \"line\", \"new-breakpoint\");\r\n    }\r\n  }\r\n\r\n  function handleGutterClick(editor, line, str, ent) {\r\n    const { state, breakpoint } = debuggerStateRef.current;\r\n    let socket = socketRef.current;\r\n    editorRef.current = editor;\r\n    console.log(breakpointExists(line))\r\n    if (!breakpointExists(line)) {\r\n      console.log(socket);\r\n      socket.emit(\"addBreakpoint\", line + 1);\r\n    } else {\r\n      console.log(\"removeBreakpoint\")\r\n      socket.emit(\"removeBreakpoint\", line + 1);\r\n    }\r\n  }\r\n\r\n  function handleEditorDidMount(editor) {\r\n    editorRef.current = editor;\r\n  }\r\n\r\n  return (\r\n    <div className={`editor-container ${open ? \"\" : \"collapsed\"}`}>\r\n      <div className=\"editor-title\">\r\n        <h5>Editor Title</h5>\r\n        <div>\r\n          <Button\r\n            style={{ margin: \"5px\" }}\r\n            onClick={() => handleRun()}\r\n            disabled={\r\n              selectedNode.type !== \"ScriptNode\" ||\r\n              isRunning ||\r\n              isDebugging ||\r\n              !isReady\r\n            }\r\n          >\r\n            Run\r\n            <FontAwesomeIcon style={{ marginLeft: \"10px\" }} icon={faPlay} />\r\n          </Button>\r\n\r\n          <Button\r\n            style={{ margin: \"5px\" }}\r\n            onClick={() => handleDebug()}\r\n            disabled={\r\n              selectedNode.type !== \"ScriptNode\" ||\r\n              isDebugging ||\r\n              isRunning ||\r\n              !isReady\r\n            }\r\n          >\r\n            Debug\r\n            <FontAwesomeIcon\r\n              style={{ marginLeft: \"10px\" }}\r\n              icon={faPlayCircle}\r\n            />\r\n          </Button>\r\n\r\n          <Button\r\n            style={{ margin: \"5px\" }}\r\n            onClick={() => handleContinue()}\r\n            disabled={!isDebugging || !isReady}\r\n          >\r\n            Continue\r\n            <FontAwesomeIcon\r\n              style={{ marginLeft: \"10px\" }}\r\n              icon={faStepForward}\r\n            />\r\n          </Button>\r\n\r\n          <Button\r\n            style={{ margin: \"5px\" }}\r\n            onClick={() => handleStep()}\r\n            disabled={!isDebugging || !isReady}\r\n          >\r\n            Step\r\n            <FontAwesomeIcon style={{ marginLeft: \"10px\" }} icon={faShare} />\r\n          </Button>\r\n\r\n          <Button\r\n            style={{ margin: \"5px\" }}\r\n            onClick={() => handleAbort()}\r\n            disabled={(!isRunning && !isDebugging) || !isReady}\r\n          >\r\n            Abort\r\n            <FontAwesomeIcon\r\n              style={{ marginLeft: \"10px\" }}\r\n              icon={faStopCircle}\r\n            />\r\n          </Button>\r\n\r\n          <button\r\n            type=\"button\"\r\n            className=\"expand-collapse-btn\"\r\n            onClick={() => setOpen((prevOpen) => !prevOpen)}\r\n          >\r\n            <FontAwesomeIcon icon={open ? faCompressAlt : faExpandAlt} />\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <ControlledEditor\r\n        onBeforeChange={handleChange}\r\n        onGutterClick={handleGutterClick}\r\n        editorDidMount={handleEditorDidMount}\r\n        value={selectedNode.data.script}\r\n        className=\"code-mirror-wrapper\"\r\n        options={{\r\n          lineWrapping: true,\r\n          lint: true,\r\n          mode: \"python\",\r\n          theme: \"material\",\r\n          lineNumbers: true,\r\n          styleActiveLine: true,\r\n          gutters: [\"CodeMirror-linenumbers\", \"breakpoints\"],\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\_components\\graph_editor\\task_node.js",["173"],"import React, { memo } from 'react';\r\nimport { Handle } from 'react-flow-renderer';\r\n// import Container from 'react-bootstrap/Container';\r\n// import Col from 'react-bootstrap/Col';\r\n// import Row from 'react-bootstrap/Row';\r\n\r\nexport default memo(({ data }) => {\r\n  return (\r\n    <>\r\n      \r\n      {/* <Container style={{padding: \"10px\"}}>\r\n      <Handle\r\n        type=\"target\"\r\n        position=\"left\"\r\n        style={{ background: '#555' }}\r\n        onConnect={(params) => console.log('handle onConnect', params)}\r\n      />\r\n      <Handle\r\n        type=\"target\"\r\n        position=\"right\"\r\n        style={{ background: '#555' }}\r\n        onConnect={(params) => console.log('handle onConnect', params)}\r\n      />\r\n          <Row>\r\n            <Col>\r\n            Info\r\n            </Col>\r\n            <Col>\r\n            Controlls\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n          <input\r\n            type=\"text\"\r\n            value = { data.label }\r\n            style={{width: \"50%\", textAlign: \"center\"}}\r\n            />\r\n          </Row>\r\n      </Container> */}\r\n    </>\r\n  );\r\n});",["174","175"],"C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\_components\\graph_editor\\sidebar\\index.js",[],"C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\_components\\console\\index.js",["176","177"],"import React, { useState, useEffect } from \"react\";\r\nimport Terminal from \"react-console-emulator\";\r\nimport TerminalMessage from \"./TerminalMessage\";\r\nimport innerText from \"react-innertext\";\r\nimport styles from \"./index.module.css\";\r\n\r\nexport const Console = ({ consoleText }) => {\r\n  const terminalRef = React.createRef();\r\n\r\n  const parseEOL = (stdout) => {\r\n    const parsedStdout = [];\r\n    for (let i = 0; i < stdout.length; i++) {\r\n      const currentLine = stdout[i];\r\n      const { message, isEcho, style } = currentLine;\r\n      const messageText = innerText(message);\r\n      // Do not parse echoes (Raw inputs)\r\n      const parsed =\r\n        !isEcho && /\\n|\\\\n/g.test(messageText)\r\n          ? messageText.split(/\\n|\\\\n/g)\r\n          : [message];\r\n\r\n      for (const line of parsed) {\r\n        parsedStdout.push({ message: line, isEcho: currentLine.isEcho, style });\r\n      }\r\n    }\r\n    return parsedStdout;\r\n  };\r\n\r\n  useEffect(() => {\r\n    let terminal = terminalRef.current;\r\n\r\n    terminal.pushToStdout = (message, style, options) => {\r\n      const { stdout } = terminal.state\r\n      if (terminal.props.locked) stdout.pop()\r\n      stdout.push({ message, isEcho: options?.isEcho || false, style })\r\n      /* istanbul ignore next: Covered by interactivity tests */\r\n      if (options?.rawInput) terminal.pushToHistory(options.rawInput)\r\n      terminal.setState({ stdout: stdout })\r\n    } \r\n\r\n    terminal.getStdout = () => {\r\n      // Parse EOL if it isn't disabled\r\n      const stdoutLocal = !terminal.props.noNewlineParsing\r\n        ? parseEOL(terminal.state.stdout)\r\n        : terminal.state.stdout;\r\n\r\n      return stdoutLocal.map((line, i) => {\r\n        return (\r\n          <TerminalMessage\r\n            key={i}\r\n            content={line.message}\r\n            dangerMode={terminal.props.dangerMode}\r\n            className={\r\n              !line.isEcho\r\n                ? terminal.props.messageClassName\r\n                : /* istanbul ignore next: Covered by interactivity tests */ undefined\r\n            }\r\n            style={line.style}\r\n          />\r\n        );\r\n      });\r\n    };\r\n  }, [terminalRef]);\r\n\r\n  const [isRunning, setIsRunning] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (consoleText != null) {\r\n      const {text, style} = consoleText;\r\n      const rootNode = terminalRef.current;\r\n      rootNode && rootNode.pushToStdout(text, style);\r\n      //console.log('code', consoleText);\r\n      rootNode && rootNode.scrollToBottom();\r\n    }\r\n  }, [consoleText]);\r\n\r\n  // Experimental syntax, requires Babel with the transform-class-properties plugin\r\n  // You may also define commands within render in case you don't have access to class field syntax\r\n\r\n  return (\r\n    <Terminal\r\n      className={styles.console}\r\n      ref={terminalRef} // Assign ref to the terminal here\r\n      commands={{}}\r\n      readOnly\r\n      disabled={isRunning}\r\n      locked={isRunning}\r\n      noAutoScroll={true}\r\n    />\r\n  );\r\n};\r\n","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\_components\\graph_editor\\node_types\\index.js",[],"C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\_components\\graph_editor\\node_types\\end_node.js",["178"],"import React from 'react';\r\nimport ReactFlow, { Handle } from 'react-flow-renderer';\r\n\r\nconst customNodeStyles = {\r\n    background: 'blue',\r\n    color: '#FFF',\r\n    padding: 10,\r\n};\r\n\r\nexport const EndNode = ({ data }) => {\r\n    return (\r\n      <div style={customNodeStyles}>\r\n        <div>End Sequence</div>\r\n        <Handle\r\n          type=\"target\"\r\n          position=\"left\"\r\n          style={{ height: '10px', width: '10px' }}\r\n        />\r\n      </div>\r\n    );\r\n  };","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\_components\\graph_editor\\node_types\\start_node.js",["179"],"import React from 'react';\r\nimport ReactFlow, { Handle } from 'react-flow-renderer';\r\n\r\nconst customNodeStyles = {\r\n    backgroundColor: 'blue',\r\n    color: '#FFF',\r\n    padding: 10,\r\n};\r\n\r\nexport const StartNode = ({ data }) => {\r\n    return (\r\n      <div style={customNodeStyles}>\r\n        <div>Start Sequence</div>\r\n        <Handle\r\n          type=\"source\"\r\n          position=\"right\"\r\n          style={{ height: '10px', width: '10px' }}\r\n        />\r\n      </div>\r\n    );\r\n  };","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\_components\\graph_editor\\node_types\\script_node.js",["180"],"import React from 'react';\r\nimport ReactFlow, { Handle } from 'react-flow-renderer';\r\n\r\nconst customNodeStyles = {\r\n    background: '#9CA8B3',\r\n    color: '#FFF',\r\n    padding: 10,\r\n};\r\n\r\nexport const ScriptNode = ({ data }) => {\r\n    return (\r\n      <div style={customNodeStyles}>\r\n        <Handle\r\n          type=\"target\"\r\n          position=\"left\"\r\n          style={{ height: '10px', width: '10px' }}\r\n        />\r\n        <div>{data.label}</div>\r\n        <Handle\r\n          type=\"source\"\r\n          position=\"right\"\r\n          style={{ height: '10px', width: '10px' }}\r\n        />\r\n      </div>\r\n    );\r\n  };","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\_components\\console\\TerminalMessage.jsx",[],"C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\_components\\navbar\\index.js",["181","182","183"],"import React, { useContext } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Navbar, Nav, NavDropdown, NavItem } from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faUserCircle,\r\n  faListAlt,\r\n  faSignInAlt,\r\n  faSignOutAlt,\r\n  faCodeBranch,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { history } from \"../../helpers\";\r\nimport \"./index.css\";\r\nimport store from \"../../helpers/store\";\r\nimport { logout } from \"../../features/userSlice\";\r\n\r\nexport const NavBar = (props) => {\r\n  console.log(props);\r\n  const dispatch = useDispatch();\r\n\r\n  const user = useSelector((state) => state.user.user);\r\n\r\n  const handleLogOut = () => {\r\n    // dispatch(userActions.logout());\r\n    dispatch(logout());\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const profileIconStyle = {\r\n    width: 25,\r\n    height: 25,\r\n    borderRadius: 50 / 2,\r\n    overflow: \"hidden\",\r\n    borderWidth: 3,\r\n    borderColor: \"red\",\r\n  };\r\n\r\n  const accountNavDropdownTitle = user ? (\r\n    <img\r\n      style={profileIconStyle}\r\n      src={user.data.avatar_url}\r\n      alt=\"Avatar\"\r\n    />\r\n  ) : (\r\n    <FontAwesomeIcon\r\n      icon={faUserCircle}\r\n      className=\"d-inline-block align-middle\"\r\n    />\r\n  );\r\n\r\n  return (\r\n    <Navbar bg=\"light\" expand=\"lg\" className=\"sticky_nav\">\r\n      <Navbar.Brand href=\"/\">\r\n        Process Engine{\" \"}\r\n        <FontAwesomeIcon icon={faCodeBranch} className=\"d-inline-block ml-2\" />\r\n      </Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"ml-auto\">\r\n          <Link to=\"/\" className=\"nav-link\">\r\n            Home\r\n          </Link>\r\n          <Link to=\"/docs\" className=\"nav-link\">\r\n            Docs\r\n          </Link>\r\n\r\n          <NavDropdown\r\n            alignRight\r\n            title={accountNavDropdownTitle}\r\n            id=\"collasible-nav-dropdown\"\r\n          >\r\n            {user ? (\r\n              <>\r\n                <Link to=\"/projects\" className=\"dropdown-item\">\r\n                  <FontAwesomeIcon\r\n                    icon={faListAlt}\r\n                    className=\"d-inline-block align-middle mr-2\"\r\n                  />\r\n                  Projects\r\n                </Link>\r\n                <NavDropdown.Divider />\r\n                <NavDropdown.Item onClick={handleLogOut}>\r\n                  <FontAwesomeIcon\r\n                    icon={faSignOutAlt}\r\n                    className=\"d-inline-block align-middle mr-2\"\r\n                  />\r\n                  Sign out\r\n                </NavDropdown.Item>\r\n              </>\r\n            ) : (\r\n              <Link to=\"/login\" className=\"dropdown-item\">\r\n                <FontAwesomeIcon\r\n                  icon={faSignInAlt}\r\n                  className=\"d-inline-block align-middle mr-2\"\r\n                />\r\n                Sign in\r\n              </Link>\r\n            )}\r\n          </NavDropdown>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  );\r\n};\r\n","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\_components\\login\\index.js",["184"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Styled from \"styled-components\";\r\nimport GithubIcon from \"mdi-react/GithubIcon\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { authenticate } from \"../../features/userSlice\";\r\n\r\nexport const Login = () => {\r\n  const [data, setData] = useState({ errorMessage: \"\", isLoading: false });\r\n  const dispatch = useDispatch();\r\n\r\n  const userState = useSelector((state) => state.user);\r\n\r\n  const { gitClientId, gitRedirectUri } = userState;\r\n\r\n  useEffect(() => {\r\n    // After requesting Github access, Github redirects back to your app with a code parameter\r\n    const url = window.location.href;\r\n    const hasCode = url.includes(\"?code=\");\r\n    // If Github API returns the code parameter\r\n    if (hasCode) {\r\n      const newUrl = url.split(\"?code=\");\r\n      window.history.pushState({}, null, newUrl[0]);\r\n      dispatch(authenticate(newUrl[1]));\r\n    }\r\n  }, [dispatch, data]);\r\n\r\n  if (userState.user) {\r\n    return <Redirect to=\"/home\" />;\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <section className=\"container\">\r\n        <div>\r\n          <h1>Welcome</h1>\r\n          <span>Super amazing app</span>\r\n          <span>{data.errorMessage}</span>\r\n          <div className=\"login-container\">\r\n            {data.isLoading ? (\r\n              <div className=\"loader-container\">\r\n                <div className=\"loader\"></div>\r\n              </div>\r\n            ) : (\r\n              <>\r\n                {\r\n                  // Link to request GitHub access\r\n                }\r\n                <a\r\n                  className=\"login-link\"\r\n                  href={`https://github.com/login/oauth/authorize?scope=user&client_id=${gitClientId}&redirect_uri=${gitRedirectUri}`}\r\n                  onClick={() => {\r\n                    setData({ ...data, errorMessage: \"\" });\r\n                  }}\r\n                >\r\n                  <GithubIcon />\r\n                  <span>Login with GitHub</span>\r\n                </a>\r\n              </>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nconst Wrapper = Styled.section`\r\n  .container {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height: 100vh;\r\n    font-family: Arial;\r\n    \r\n    > div:nth-child(1) {\r\n      display: flex;\r\n      flex-direction: column;\r\n      justify-content: center;\r\n      align-items: center;\r\n      box-shadow: 0 1px 4px 0 rgba(0, 0, 0, 0.2);\r\n      transition: 0.3s;\r\n      width: 25%;\r\n      height: 45%;\r\n      > h1 {\r\n        font-size: 2rem;\r\n        margin-bottom: 20px;\r\n      }\r\n      > span:nth-child(2) {\r\n        font-size: 1.1rem;\r\n        color: #808080;\r\n        margin-bottom: 70px;\r\n      }\r\n      > span:nth-child(3) {\r\n        margin: 10px 0 20px;\r\n        color: red;\r\n      }\r\n      .login-container {\r\n        background-color: #000;\r\n        width: 70%;\r\n        border-radius: 3px;\r\n        color: #fff;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        > .login-link {\r\n          text-decoration: none;\r\n          color: #fff;\r\n          text-transform: uppercase;\r\n          cursor: default;\r\n          display: flex;\r\n          align-items: center;          \r\n          height: 40px;\r\n          > span:nth-child(2) {\r\n            margin-left: 5px;\r\n          }\r\n        }\r\n        .loader-container {\r\n          display: flex;\r\n          justify-content: center;\r\n          align-items: center;          \r\n          height: 40px;\r\n        }\r\n        .loader {\r\n          border: 4px solid #f3f3f3;\r\n          border-top: 4px solid #3498db;\r\n          border-radius: 50%;\r\n          width: 12px;\r\n          height: 12px;\r\n          animation: spin 2s linear infinite;\r\n        }\r\n        @keyframes spin {\r\n          0% {\r\n            transform: rotate(0deg);\r\n          }\r\n          100% {\r\n            transform: rotate(360deg);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\_components\\home\\index.js",[],"C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\_components\\projects\\index.js",["185","186"],"C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\_components\\docs\\index.js",["187","188","189","190"],"import React, { useEffect, useState } from 'react';\r\nimport { Container, Row, Col, Button, ListGroup } from 'react-bootstrap';\r\nimport contents from './contents';\r\nimport './index.css';\r\nimport { ListItem } from '../list_item';\r\n// import file from \"./pages/introduction.md\";\r\nimport ReactMarkdown from 'react-markdown'\r\n\r\nexport const Docs = () => {\r\n\r\n    const [selectedItem, setSelectedItem] = useState(undefined);\r\n    const [selectedItemIndex, setSelectedItemIndex] = useState(0);\r\n    const [selectedMarkdown, setSelectedMarkdown] = useState(undefined);\r\n\r\n    useEffect( async () => {\r\n        if(!contents[selectedItemIndex].hasOwnProperty('markdown')){\r\n            const markdown = await getMarkdown(selectedItemIndex);\r\n            contents[selectedItemIndex]['markdown'] = markdown;\r\n        }\r\n        setSelectedMarkdown(contents[selectedItemIndex]['markdown']);\r\n    }, [selectedItemIndex]);\r\n\r\n    const getMarkdown = async (index) => {\r\n        const file = require(`./markdown/${contents[index].path}`);\r\n        const res = await fetch(file.default, {});\r\n        return res.text();\r\n    }\r\n\r\n    const makeListItems = () => {\r\n        return(\r\n            <ListGroup className='list-group-flush'> \r\n                {\r\n                    contents.map((content, index) => {\r\n                        return <ListItem key={index} isActive={selectedItemIndex === index} onClick={() => setSelectedItemIndex(index)} text={content.name} />\r\n                    })\r\n                }\r\n            </ListGroup>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Container fluid>\r\n                <Row>\r\n                    <Col className='sidebar' md={2}>\r\n                        <div className='sidebar-sticky'>\r\n                            { makeListItems() }\r\n                        </div>\r\n                        \r\n                    </Col>\r\n                    <Col md={8}>\r\n                        {selectedItemIndex == null ? '' : <ReactMarkdown source={selectedMarkdown} /> }\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\n\r\n","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\_components\\projects\\new\\index.js",["191","192","193","194","195","196","197"],"import React, { useState, useEffect } from 'react';\r\nimport { Container, Row, Col, Button, Form } from 'react-bootstrap';\r\nimport { faUserCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport styles from './index.module.css';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { history } from '../../../helpers';\r\n\r\nexport const NewProject = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const [projectName, setProjectName] = useState();\r\n\r\n    const handleCreate = (e) => {\r\n        e.preventDefault()\r\n        dispatch(projectActions.create({name: projectName}));\r\n        //history.push(\"/projects\");\r\n    }\r\n\r\n    const handleInputChanged = (event) => {\r\n        setProjectName(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div style={{ marginTop: '60px' }}>\r\n                <Container style={{ padding: '0px 300px' }}>\r\n                    <h1>New Project</h1>\r\n                    <Form>\r\n                        <Form.Group>\r\n                            <Form.Label>Project name</Form.Label>\r\n                            <Form.Control onChange={handleInputChanged.bind(this)} type=\"text\" placeholder=\"Enter project name\" />\r\n                        </Form.Group>\r\n                        <Button  onClick={handleCreate.bind(this)} variant=\"primary\" type=\"Create project\">\r\n                            Submit\r\n                        </Button>\r\n                    </Form>\r\n                </Container>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\n","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\_components\\docs\\contents.js",[],"C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\_components\\list_item\\index.js",["198"],"import React, { useState } from 'react';\r\nimport './index.css';\r\n\r\nexport const ListItem = props => {\r\n    const className = `list-group-item list-group-item-action${props.isActive ? ' active' : ''}`;\r\n\r\n    return (\r\n        <li className={className} onClick={props.onClick}>{props.text} </li>\r\n    )\r\n}","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\helpers\\store.js",[],"C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\features\\userSlice.js",[],"C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\helpers\\index.js",[],"C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\helpers\\history.js",[],"C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\helpers\\auth_header.js",[],"C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\features\\projectSlice.js",[],{"ruleId":"199","replacedBy":"200"},{"ruleId":"201","replacedBy":"202"},{"ruleId":"199","replacedBy":"203"},{"ruleId":"201","replacedBy":"204"},{"ruleId":"199","replacedBy":"205"},{"ruleId":"201","replacedBy":"206"},{"ruleId":"207","severity":1,"message":"208","line":1,"column":17,"nodeType":"209","messageId":"210","endLine":1,"endColumn":26},{"ruleId":"207","severity":1,"message":"211","line":3,"column":10,"nodeType":"209","messageId":"210","endLine":3,"endColumn":21},{"ruleId":"207","severity":1,"message":"212","line":3,"column":23,"nodeType":"209","messageId":"210","endLine":3,"endColumn":34},{"ruleId":"207","severity":1,"message":"213","line":5,"column":10,"nodeType":"209","messageId":"210","endLine":5,"endColumn":17},{"ruleId":"207","severity":1,"message":"214","line":6,"column":26,"nodeType":"209","messageId":"210","endLine":6,"endColumn":37},{"ruleId":"215","severity":1,"message":"216","line":40,"column":8,"nodeType":"217","endLine":40,"endColumn":10,"suggestions":"218"},{"ruleId":"219","severity":1,"message":"220","line":60,"column":17,"nodeType":"221","messageId":"222","endLine":60,"endColumn":19},{"ruleId":"219","severity":1,"message":"220","line":62,"column":22,"nodeType":"221","messageId":"222","endLine":62,"endColumn":24},{"ruleId":"215","severity":1,"message":"223","line":82,"column":8,"nodeType":"217","endLine":82,"endColumn":10,"suggestions":"224"},{"ruleId":"215","severity":1,"message":"225","line":125,"column":6,"nodeType":"209","endLine":125,"endColumn":18},{"ruleId":"215","severity":1,"message":"226","line":125,"column":6,"nodeType":"209","endLine":125,"endColumn":18,"suggestions":"227"},{"ruleId":"215","severity":1,"message":"228","line":157,"column":6,"nodeType":"217","endLine":157,"endColumn":24,"suggestions":"229"},{"ruleId":"215","severity":1,"message":"230","line":63,"column":6,"nodeType":"217","endLine":63,"endColumn":20,"suggestions":"231"},{"ruleId":"232","severity":1,"message":"233","line":76,"column":5,"nodeType":"234","messageId":"235","endLine":132,"endColumn":6},{"ruleId":"219","severity":1,"message":"220","line":109,"column":29,"nodeType":"221","messageId":"222","endLine":109,"endColumn":31},{"ruleId":"219","severity":1,"message":"220","line":110,"column":29,"nodeType":"221","messageId":"222","endLine":110,"endColumn":31},{"ruleId":"219","severity":1,"message":"220","line":113,"column":35,"nodeType":"221","messageId":"222","endLine":113,"endColumn":37},{"ruleId":"215","severity":1,"message":"236","line":134,"column":6,"nodeType":"217","endLine":134,"endColumn":21,"suggestions":"237"},{"ruleId":"219","severity":1,"message":"238","line":150,"column":25,"nodeType":"221","messageId":"222","endLine":150,"endColumn":27},{"ruleId":"207","severity":1,"message":"239","line":210,"column":13,"nodeType":"209","messageId":"210","endLine":210,"endColumn":18},{"ruleId":"207","severity":1,"message":"240","line":210,"column":20,"nodeType":"209","messageId":"210","endLine":210,"endColumn":30},{"ruleId":"207","severity":1,"message":"241","line":2,"column":10,"nodeType":"209","messageId":"210","endLine":2,"endColumn":16},{"ruleId":"199","replacedBy":"242"},{"ruleId":"201","replacedBy":"243"},{"ruleId":"207","severity":1,"message":"244","line":65,"column":21,"nodeType":"209","messageId":"210","endLine":65,"endColumn":33},{"ruleId":"215","severity":1,"message":"245","line":75,"column":6,"nodeType":"217","endLine":75,"endColumn":19,"suggestions":"246"},{"ruleId":"207","severity":1,"message":"247","line":2,"column":8,"nodeType":"209","messageId":"210","endLine":2,"endColumn":17},{"ruleId":"207","severity":1,"message":"247","line":2,"column":8,"nodeType":"209","messageId":"210","endLine":2,"endColumn":17},{"ruleId":"207","severity":1,"message":"247","line":2,"column":8,"nodeType":"209","messageId":"210","endLine":2,"endColumn":17},{"ruleId":"207","severity":1,"message":"248","line":1,"column":17,"nodeType":"209","messageId":"210","endLine":1,"endColumn":27},{"ruleId":"207","severity":1,"message":"249","line":3,"column":36,"nodeType":"209","messageId":"210","endLine":3,"endColumn":43},{"ruleId":"207","severity":1,"message":"250","line":16,"column":8,"nodeType":"209","messageId":"210","endLine":16,"endColumn":13},{"ruleId":"207","severity":1,"message":"248","line":1,"column":38,"nodeType":"209","messageId":"210","endLine":1,"endColumn":48},{"ruleId":"207","severity":1,"message":"208","line":1,"column":17,"nodeType":"209","messageId":"210","endLine":1,"endColumn":26},{"ruleId":"207","severity":1,"message":"251","line":11,"column":9,"nodeType":"209","messageId":"210","endLine":11,"endColumn":17},{"ruleId":"207","severity":1,"message":"252","line":2,"column":31,"nodeType":"209","messageId":"210","endLine":2,"endColumn":37},{"ruleId":"207","severity":1,"message":"253","line":11,"column":12,"nodeType":"209","messageId":"210","endLine":11,"endColumn":24},{"ruleId":"207","severity":1,"message":"254","line":11,"column":26,"nodeType":"209","messageId":"210","endLine":11,"endColumn":41},{"ruleId":"215","severity":1,"message":"255","line":15,"column":16,"nodeType":"256","endLine":21,"endColumn":6},{"ruleId":"207","severity":1,"message":"208","line":1,"column":27,"nodeType":"209","messageId":"210","endLine":1,"endColumn":36},{"ruleId":"207","severity":1,"message":"257","line":2,"column":21,"nodeType":"209","messageId":"210","endLine":2,"endColumn":24},{"ruleId":"207","severity":1,"message":"258","line":2,"column":26,"nodeType":"209","messageId":"210","endLine":2,"endColumn":29},{"ruleId":"207","severity":1,"message":"259","line":3,"column":10,"nodeType":"209","messageId":"210","endLine":3,"endColumn":22},{"ruleId":"207","severity":1,"message":"260","line":4,"column":8,"nodeType":"209","messageId":"210","endLine":4,"endColumn":14},{"ruleId":"207","severity":1,"message":"212","line":5,"column":23,"nodeType":"209","messageId":"210","endLine":5,"endColumn":34},{"ruleId":"207","severity":1,"message":"213","line":7,"column":10,"nodeType":"209","messageId":"210","endLine":7,"endColumn":17},{"ruleId":"207","severity":1,"message":"261","line":1,"column":17,"nodeType":"209","messageId":"210","endLine":1,"endColumn":25},"no-native-reassign",["262"],"no-negated-in-lhs",["263"],["262"],["263"],["262"],["263"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useDispatch' is defined but never used.","'useSelector' is defined but never used.","'history' is defined but never used.","'taskActions' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'prettifyConsoleText'. Either include it or remove the dependency array.","ArrayExpression",["264"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'dispatch' and 'id'. Either include them or remove the dependency array.",["265"],"React Hook useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","React Hook useEffect has missing dependencies: 'elements' and 'formatLayout'. Either include them or remove the dependency array.",["266"],"React Hook useEffect has a missing dependency: 'selectedNode.id'. Either include it or remove the dependency array. If 'setElements' needs the current value of 'selectedNode.id', you can also switch to useReducer instead of useState and read 'selectedNode.id' in the reducer.",["267"],"React Hook useEffect has a missing dependency: 'markers'. Either include it or remove the dependency array.",["268"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has missing dependencies: 'addBreakpoint', 'markLine', 'prettifyConsoleText', 'removeBreakpoint', 'selectedNode.data.breakpoints', 'selectedNode.data.label', and 'socket'. Either include them or remove the dependency array.",["269"],"Expected '!==' and instead saw '!='.","'state' is assigned a value but never used.","'breakpoint' is assigned a value but never used.","'Handle' is defined but never used.",["262"],["263"],"'setIsRunning' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'terminalRef'. Either include it or remove the dependency array.",["270"],"'ReactFlow' is defined but never used.","'useContext' is defined but never used.","'NavItem' is defined but never used.","'store' is defined but never used.","'dispatch' is assigned a value but never used.","'Button' is defined but never used.","'selectedItem' is assigned a value but never used.","'setSelectedItem' is assigned a value but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'Row' is defined but never used.","'Col' is defined but never used.","'faUserCircle' is defined but never used.","'styles' is defined but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"271","fix":"272"},{"desc":"273","fix":"274"},{"desc":"275","fix":"276"},{"desc":"277","fix":"278"},{"desc":"279","fix":"280"},{"desc":"281","fix":"282"},{"desc":"283","fix":"284"},"Update the dependencies array to be: [prettifyConsoleText]",{"range":"285","text":"286"},"Update the dependencies array to be: [dispatch, id]",{"range":"287","text":"288"},"Update the dependencies array to be: [elements, formatLayout]",{"range":"289","text":"290"},"Update the dependencies array to be: [selectedNode.id, selectedNodeName]",{"range":"291","text":"292"},"Update the dependencies array to be: [clearMarkers, markers]",{"range":"293","text":"294"},"Update the dependencies array to be: [addBreakpoint, debuggerState, markLine, prettifyConsoleText, removeBreakpoint, selectedNode.data.breakpoints, selectedNode.data.label, socket]",{"range":"295","text":"296"},"Update the dependencies array to be: [consoleText, terminalRef]",{"range":"297","text":"298"},[1173,1175],"[prettifyConsoleText]",[2423,2425],"[dispatch, id]",[3189,3201],"[elements, formatLayout]",[4176,4194],"[selectedNode.id, selectedNodeName]",[1976,1990],"[clearMarkers, markers]",[4283,4298],"[addBreakpoint, debuggerState, markLine, prettifyConsoleText, removeBreakpoint, selectedNode.data.breakpoints, selectedNode.data.label, socket]",[2479,2492],"[consoleText, terminalRef]"]