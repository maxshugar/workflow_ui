[{"C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\index.js":"1","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\reportWebVitals.js":"2","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\components\\Modal\\index.js":"3","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\components\\sidebar\\index.js":"4","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\App.js":"5","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\containers\\dash\\index.js":"6","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\containers\\home\\index.js":"7","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\containers\\editor\\index.js":"8","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\components\\navbar\\index.js":"9","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\components\\navbar\\menu_items.js":"10","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\components\\code_editor\\index.js":"11","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\components\\graph_editor\\index.js":"12","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\components\\graph_editor\\task_node.js":"13","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\app.js":"14","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\components\\button\\index.js":"15"},{"size":173,"mtime":1615559763711,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":499162500000,"results":"18","hashOfConfig":"17"},{"size":1706,"mtime":1610542409566,"results":"19","hashOfConfig":"17"},{"size":910,"mtime":1615551504555,"results":"20","hashOfConfig":"17"},{"size":924,"mtime":1615559854944,"results":"21","hashOfConfig":"17"},{"size":122,"mtime":1615551504556,"results":"22","hashOfConfig":"17"},{"size":124,"mtime":1615551504557,"results":"23","hashOfConfig":"17"},{"size":852,"mtime":1615561551398,"results":"24","hashOfConfig":"17"},{"size":1045,"mtime":1615562789498,"results":"25","hashOfConfig":"17"},{"size":484,"mtime":1615554235232,"results":"26","hashOfConfig":"17"},{"size":684,"mtime":1615551504552,"results":"27","hashOfConfig":"17"},{"size":3593,"mtime":1615551504553,"results":"28","hashOfConfig":"17"},{"size":1098,"mtime":1615561574518,"results":"29","hashOfConfig":"17"},{"size":933,"mtime":1615561609318,"results":"30","hashOfConfig":"17"},{"size":624,"mtime":1615562384778,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"eemzca",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\index.js",[],["68","69"],"C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\reportWebVitals.js",[],["70","71"],"C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\components\\Modal\\index.js",[],["72","73"],"C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\components\\sidebar\\index.js",["74"],"import React from 'react';\r\nexport default () => {\r\n  const onDragStart = (event, nodeType) => {\r\n    event.dataTransfer.setData('application/reactflow', nodeType);\r\n    event.dataTransfer.effectAllowed = 'move';\r\n  };\r\n  return (\r\n    <aside>\r\n      <div className=\"description\">You can drag these nodes to the pane on the right.</div>\r\n      <div className=\"dndnode input\" onDragStart={(event) => onDragStart(event, 'input')} draggable>\r\n        Input Node\r\n      </div>\r\n      <div className=\"dndnode\" onDragStart={(event) => onDragStart(event, 'default')} draggable>\r\n        Default Node\r\n      </div>\r\n      <div className=\"dndnode taskNode\" onDragStart={(event) => onDragStart(event, 'taskNode')} draggable>\r\n        Task Node\r\n      </div>\r\n      <div className=\"dndnode output\" onDragStart={(event) => onDragStart(event, 'output')} draggable>\r\n        Output Node\r\n      </div>\r\n    </aside>\r\n  );\r\n};","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\App.js",["75"],"C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\containers\\dash\\index.js",[],"C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\containers\\home\\index.js",[],"C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\containers\\editor\\index.js",["76","77","78","79","80"],"C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\components\\navbar\\index.js",[],"C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\components\\navbar\\menu_items.js",[],"C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\components\\code_editor\\index.js",["81","82"],"import React, { Component } from \"react\";\r\nimport AceEditor from \"react-ace\";\r\n\r\nimport \"ace-builds/src-noconflict/mode-java\";\r\nimport \"ace-builds/src-noconflict/theme-github\";\r\nimport { ConnectionMode } from \"react-flow-renderer\";\r\n\r\n// Render editor\r\nexport const CodeEditor = ({selectedNode}) => {\r\n  const onChange = (newValue) => {\r\n    console.log(\"change\", newValue);\r\n    selectedNode.data.code = newValue;\r\n  }\r\n\r\n    return( \r\n    <AceEditor\r\n        mode=\"javascript\"\r\n        theme=\"github\"\r\n        onChange={onChange}\r\n        name=\"UNIQUE_ID_OF_DIV\"\r\n        editorProps={{ $blockScrolling: true }}\r\n        value={selectedNode.data.code || \"default\"}\r\n    />\r\n    )\r\n}","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\components\\graph_editor\\index.js",["83"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport ReactFlow, {\r\n  ReactFlowProvider,\r\n  addEdge,\r\n  removeElements,\r\n  Controls\r\n} from 'react-flow-renderer';\r\nimport Sidebar from '../sidebar';\r\nimport './dnd.css';\r\nimport taskNode from './task_node';\r\nconst initialElements = [\r\n  {\r\n    id: '1',\r\n    type: 'input',\r\n    data: { label: 'input node' },\r\n    position: { x: 250, y: 5 },\r\n  },\r\n  {\r\n    id: '2',\r\n    type: 'taskNode',\r\n    data: { label: 'task node', code: \"this is a test\" },\r\n    position: { x: 350, y: 5 },\r\n  },\r\n];\r\nlet id = 0;\r\nconst getId = () => `dndnode_${id++}`;\r\n\r\nconst nodeTypes = {\r\n  taskNode\r\n};\r\n\r\n\r\nconst GraphEditor = ({selectedNode, setSelectedNode}) => {\r\n  const reactFlowWrapper = useRef(null);\r\n  const [reactFlowInstance, setReactFlowInstance] = useState(null);\r\n  const [elements, setElements] = useState(initialElements);\r\n\r\n  //const [selectedNode, setSelectedNode] = useState({id: -1, data: {label: 'test'}});\r\n\r\n  const [selectedNodeName, setSelectedNodeName] = useState();\r\n\r\n\r\n  const onElementClick= (evt, node) => setSelectedNode(node);\r\n\r\n  useEffect(() => setSelectedNodeName(selectedNode.data.label), [selectedNode]);\r\n\r\n  useEffect(() => {\r\n    setElements((els) =>\r\n      els.map((el) => {\r\n        if (el.id === selectedNode.id) {\r\n          // it's important that you create a new object here\r\n          // in order to notify react flow about the change\r\n          el.data = {\r\n            ...el.data,\r\n            label: selectedNodeName,\r\n          };\r\n        }\r\n        return el;\r\n      })\r\n    );\r\n  }, [selectedNodeName]);\r\n\r\n  const onConnect = (params) => setElements((els) => addEdge(params, els));\r\n  const onNodeDragStart = (evt, node) => setSelectedNode(node);\r\n  const onElementsRemove = (elementsToRemove) =>\r\n    setElements((els) => removeElements(elementsToRemove, els));\r\n  const onLoad = (_reactFlowInstance) =>\r\n    setReactFlowInstance(_reactFlowInstance);\r\n  const onDragOver = (event) => {\r\n    event.preventDefault();\r\n    event.dataTransfer.dropEffect = 'move';\r\n    \r\n  };\r\n  const onDrop = (event) => {\r\n    event.preventDefault();\r\n    const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\r\n    const type = event.dataTransfer.getData('application/reactflow');\r\n    const position = reactFlowInstance.project({\r\n      x: event.clientX - reactFlowBounds.left,\r\n      y: event.clientY - reactFlowBounds.top,\r\n    });\r\n    const newNode = {\r\n      id: getId(),\r\n      type,\r\n      position,\r\n      data: { label: `${type} node` },\r\n    };\r\n    setElements((es) => es.concat(newNode));\r\n    setSelectedNode(newNode);\r\n  };\r\n  return (\r\n    <div className=\"dndflow\">\r\n      <ReactFlowProvider>\r\n        <Sidebar />\r\n        <div className=\"reactflow-wrapper\" ref={reactFlowWrapper}>\r\n          <ReactFlow\r\n            elements={elements}\r\n            nodeTypes={nodeTypes}\r\n            onConnect={onConnect}\r\n            onElementsRemove={onElementsRemove}\r\n            onElementClick = {onElementClick}\r\n            onLoad={onLoad}\r\n            onDrop={onDrop}\r\n            onDragOver={onDragOver}\r\n            onNodeDragStart = {onNodeDragStart}\r\n          >\r\n            <div className=\"updatenode__controls\">\r\n            <label>label:</label>\r\n            <input\r\n              value={selectedNodeName}\r\n              onChange={(evt) => setSelectedNodeName(evt.target.value)}\r\n            />\r\n            \r\n          </div>\r\n            <Controls />\r\n          </ReactFlow>\r\n        </div>\r\n      </ReactFlowProvider>\r\n    </div>\r\n  );\r\n};\r\nexport default GraphEditor;","C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\components\\graph_editor\\task_node.js",["84"],"C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\app.js",["85","86","87"],"C:\\Users\\gbshugam\\projects\\workflow_ui\\src\\components\\button\\index.js",[],{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","replacedBy":"91"},{"ruleId":"88","replacedBy":"92"},{"ruleId":"90","replacedBy":"93"},{"ruleId":"88","replacedBy":"94"},{"ruleId":"90","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":2,"column":1,"nodeType":"98","endLine":24,"endColumn":3},{"ruleId":"99","severity":1,"message":"100","line":12,"column":3,"nodeType":"101","endLine":12,"endColumn":7},{"ruleId":"102","severity":1,"message":"103","line":1,"column":8,"nodeType":"104","messageId":"105","endLine":1,"endColumn":13},{"ruleId":"102","severity":1,"message":"106","line":1,"column":17,"nodeType":"104","messageId":"105","endLine":1,"endColumn":25},{"ruleId":"102","severity":1,"message":"107","line":1,"column":27,"nodeType":"104","messageId":"105","endLine":1,"endColumn":36},{"ruleId":"102","severity":1,"message":"108","line":2,"column":8,"nodeType":"104","messageId":"105","endLine":2,"endColumn":19},{"ruleId":"102","severity":1,"message":"109","line":3,"column":10,"nodeType":"104","messageId":"105","endLine":3,"endColumn":20},{"ruleId":"102","severity":1,"message":"110","line":1,"column":17,"nodeType":"104","messageId":"105","endLine":1,"endColumn":26},{"ruleId":"102","severity":1,"message":"111","line":6,"column":10,"nodeType":"104","messageId":"105","endLine":6,"endColumn":24},{"ruleId":"112","severity":1,"message":"113","line":61,"column":6,"nodeType":"114","endLine":61,"endColumn":24,"suggestions":"115"},{"ruleId":"102","severity":1,"message":"116","line":2,"column":10,"nodeType":"104","messageId":"105","endLine":2,"endColumn":16},{"ruleId":"102","severity":1,"message":"117","line":2,"column":27,"nodeType":"104","messageId":"105","endLine":2,"endColumn":33},{"ruleId":"102","severity":1,"message":"118","line":2,"column":35,"nodeType":"104","messageId":"105","endLine":2,"endColumn":41},{"ruleId":"102","severity":1,"message":"119","line":2,"column":43,"nodeType":"104","messageId":"105","endLine":2,"endColumn":48},"no-native-reassign",["120"],"no-negated-in-lhs",["121"],["120"],["121"],["120"],["121"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","ThisExpression","no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'useEffect' is defined but never used.","'GraphEditor' is defined but never used.","'CodeEditor' is defined but never used.","'Component' is defined but never used.","'ConnectionMode' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'selectedNode.id'. Either include it or remove the dependency array. If 'setElements' needs the current value of 'selectedNode.id', you can also switch to useReducer instead of useState and read 'selectedNode.id' in the reducer.","ArrayExpression",["122"],"'Handle' is defined but never used.","'Router' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"123","fix":"124"},"Update the dependencies array to be: [selectedNode.id, selectedNodeName]",{"range":"125","text":"126"},[1585,1603],"[selectedNode.id, selectedNodeName]"]